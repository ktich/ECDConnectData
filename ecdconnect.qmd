---
title: "ECD Connect Data Report"
author: "Kim Tichmann"
format: html
---

# October 2025 Report
Data report as of 21 October 2025

## 1. Reach and Scale of ECD Connect
A summary of ECD Connect's reach.

This includes the ECD Connect App (open-access), all ECD Connect Partner versions (white-label) and Grow Great's CHW Connect. The numbers below represent all numbers since launch.

::: {.stat-block}

::: {.stat-card}
<p class="stat-number">4</p>
<p class="stat-label">partner organisations</p>
:::

::: {.stat-card}
<p class="stat-number">2,063</p>
<p class="stat-label">unique user sign-ups</p>
:::

::: {.stat-card}
<p class="stat-number">12,422</p>
<p class="stat-label">total number of children added across all platforms</p>
:::

:::


```{r beneficiaries-map, echo=FALSE}
#| message: false
#| warning: false
#| paged-print: true

library(tidyverse)
library(sf)
library(dplyr)
library(ggplot2)
library(conflicted)
library(stringr)
library(patchwork)
library(scales)
library(viridis)
library(lubridate)
library(readr)
library(leaflet)
library(plotly)
library(gt)

conflict_prefer("filter","dplyr")

load("~/Desktop/data/sub_places.rda")  
load("~/Desktop/data/postalcodes_geo.rda")

df_children <- read.csv("~/Desktop/data/codes-ed.csv", stringsAsFactors = FALSE)
df_clients  <- read.csv("~/Desktop/data/GG-location.csv", stringsAsFactors = FALSE)

districts <- suppressMessages(suppressWarnings(st_read("~/Desktop/data/DistrictMunicipalities2018_Final.shp", quiet = TRUE)))

df_clients2 <- df_clients %>%
  mutate(
    District_clean = trimws(toupper(District))
  )

districts2 <- districts %>%
  mutate(
    DISTRICT_NAME_clean = trimws(toupper(DISTRICT_N))
  )

# Which CSV district names are in the map?
matched <- df_clients2 %>%
  filter(District_clean %in% districts2$DISTRICT_NAME_clean)
invisible(nrow(matched))

# ensure the district polygon column exists
if (!"DISTRICT_NAME_clean" %in% names(districts2)) {
  stop("Expected DISTRICT_NAME_clean in 'districts2' but not found.")
}

# Join the health data to the district polygons
districts_health <- districts2 %>%
  left_join(df_clients2, by = c("DISTRICT_NAME_clean" = "District_clean"))

df_children2 <- df_children %>%
  mutate(PostalCode = as.character(PostalCode),
         TotalChildren = as.numeric(TotalChildren))

postalcodes_geo2 <- postalcodes_geo %>%
  mutate(PostalCode = as.character(code))

# join lat/lon + totals
pcs <- postalcodes_geo2 %>%
  left_join(df_children2, by = "PostalCode") %>%
  filter(!is.na(TotalChildren))

# convert to spatial points
pcs_sf <- st_as_sf(pcs, coords = c("lon", "lat"), crs = 4326, remove = FALSE)

# align CRS + spatial join to districts
pcs_sf <- st_transform(pcs_sf, st_crs(districts2))
pcs_with_district <- st_join(pcs_sf, districts2 %>% select(DISTRICT_NAME_clean), join = st_within)

# aggregate postal codes up to district
districts_ed <- pcs_with_district %>%
  st_set_geometry(NULL) %>%
  group_by(DISTRICT_NAME_clean) %>%
  summarise(TotalChildren = sum(TotalChildren, na.rm = TRUE)) %>%
  right_join(districts2, by = "DISTRICT_NAME_clean") %>%
  st_as_sf()

# ---- COMBINE BOTH LAYERS ----
health_for_map <- districts_health %>%
  select(DISTRICT_NAME_clean, geometry, Value = TotalClients) %>%
  mutate(Source = "Health")

ed_for_map <- districts_ed %>%
  select(DISTRICT_NAME_clean, geometry, Value = TotalChildren) %>%
  mutate(Source = "Education")

combined_map <- bind_rows(health_for_map, ed_for_map) %>%
  group_by(DISTRICT_NAME_clean) %>%
  summarise(
    TotalBeneficiaries = sum(Value, na.rm = TRUE),
    geometry = sf::st_union(geometry)
  ) %>%
  ungroup()

# --- Merge with district polygons to ensure full geometry coverage ---
combined_map <- districts2 %>%
  left_join(
    st_drop_geometry(combined_map),
    by = "DISTRICT_NAME_clean"
  )


# --- Plot ---

combined_map <- combined_map %>%
  mutate(
    BeneficiaryBand = case_when(
      is.na(TotalBeneficiaries) ~ "0",
      TotalBeneficiaries == 0 ~ "0",
      TotalBeneficiaries <= 500 ~ "1–500",
      TotalBeneficiaries <= 1000 ~ "501–1000",
      TotalBeneficiaries <= 1500 ~ "1001–1500",
      TotalBeneficiaries <= 2000 ~ "1501–2000",
      TotalBeneficiaries <= 2500 ~ "2001–2500",
      TotalBeneficiaries <= 3000 ~ "2501–3000",
      TotalBeneficiaries <= 3500 ~ "3001–3500",
      TotalBeneficiaries <= 4000 ~ "3501–4000",
      TotalBeneficiaries > 4000 ~ "4000+"
    ),
    BeneficiaryBand = factor(
      BeneficiaryBand,
      levels = c("0", "1–500", "501–1000", "1001–1500", "1501–2000",
                 "2001–2500", "2501–3000", "3001–3500", "3501–4000", "4000+")
    )
  )


brand_palette <- c(
  "0" = "#EFEFEF",        # light grey
  "1–500" = "#D8EBF6",    # very light blue
  "501–1000" = "#CBE9F4",
  "1001–1500" = "#A4DBEF",
  "1501–2000" = "#8EDCEF",
  "2001–2500" = "#5CCAE2",
  "2501–3000" = "#1DBADF",
  "3001–3500" = "#1497BF",
  "3501–4000" = "#52607B",
  "4000+" = "#27385A"     # darkest brand blue
)

# Create dummy rows for each BeneficiaryBand
dummy_levels <- data.frame(
  BeneficiaryBand = factor(
    names(brand_palette),
    levels = names(brand_palette)
  )
)

# Create dummy geometries with the same CRS as your combined_map
dummy_levels$geometry <- sf::st_sfc(
  replicate(
    length(brand_palette),
    sf::st_point(c(0, 0)),
    simplify = FALSE
  ),
  crs = sf::st_crs(combined_map)   # ensure same CRS
)

# Convert dummy_levels into an sf object
dummy_levels <- sf::st_as_sf(dummy_levels)

# Combine with your real map data
combined_map2 <- dplyr::bind_rows(
  combined_map %>% select(BeneficiaryBand, geometry),
  dummy_levels
)


ggplot(combined_map2) +
    geom_sf(aes(fill = BeneficiaryBand), colour = "#fff", size = 0.15) +
  scale_fill_manual(
    values = brand_palette,
    name = "Total beneficiaries",
    drop = FALSE,
    na.value = brand_palette["0"],
    guide=guide_legend(
      override.aes = list(fill = unname(brand_palette))
    )
  ) +
  coord_sf(xlim = st_bbox(combined_map)[c("xmin", "xmax")],
         ylim = st_bbox(combined_map)[c("ymin", "ymax")],
         expand = FALSE) +
  labs(
    title = "Total Beneficiaries by District",
    subtitle = "Combined Health and Education data",
    caption = "‘Beneficiaries’ refers to children (education and health) \n and pregnant clients (health) registered in the app."
  ) +
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    panel.grid = element_blank()
  )

```

---

<br>

## 2. Versions
### Education
#### ECD Connect App
_Since launch in April 2025 to October 2025_

::: {.stat-block}

::: {.stat-card .app-background}
<p class="stat-number">1,508</p>
<p class="stat-label">unique sign-ups</p>
:::

::: {.stat-card .app-background}
<p class="stat-number">509</p>
<p class="stat-label">preschools added</p>
:::

::: {.stat-card .app-background}
<p class="stat-number">1,522</p>
<p class="stat-label">children registered</p>
:::

:::

##### User Retention

- **17%** of users who joined the app over 30 days ago have logged in again after 30 days. This is higher than the standard [global app retention rate of 7% by day 30](https://www.adjust.com/resources/guides/user-retention/).
- **10%** of practitioners who signed up over 30 days ago have logged in within the past month.


#### ECD Connect Partner
_Since launch in October 2024 to October 2025_

::: {.stat-block}

::: {.stat-card .partner-background}
<p class="stat-number">226</p>
<p class="stat-label">unique sign-ups</p>
:::

::: {.stat-card .partner-background}
<p class="stat-number">61</p>
<p class="stat-label">preschools added</p>
:::

::: {.stat-card .partner-background}
<p class="stat-number">887</p>
<p class="stat-label">children registered</p>
:::

:::

##### User Retention

- **26%** of users who joined the app over 30 days ago have logged in again after 30 days.
- **13%** of practitioners who signed up over 30 days ago have logged in within the past month.

### Health

#### CHW Connect
_Since launch in April 2024 to October 2025_

::: {.stat-block}

::: {.stat-card .gg-background}
<p class="stat-number">342</p>
<p class="stat-label">CHWs registered</p>
:::

::: {.stat-card .gg-background}
<p class="stat-number">60 160</p>
<p class="stat-label">child visits completed</p>
:::

::: {.stat-card .gg-background}
<p class="stat-number">6 495</p>
<p class="stat-label">pregnant client visits completed</p>
:::

:::

##### User Retention

- **79%** of CHWs who joined the app over 30 days ago have logged in again after 30 days.
- **35%** of CHWs who signed up over 30 days ago have logged in within the past month.

<br>

---

<br>

## 3. Emerging Insights

### Education

#### 1. Child Demographics

##### Geographic Spread of Registered Children

```{r ed-children-map, echo=FALSE}
#| message: false
#| warning: false
#| paged-print: true

# --- Load shapefile ---
districts <- st_read("~/Desktop/data/DistrictMunicipalities2018_Final.shp", quiet = TRUE) %>%
  st_transform(4326)

# --- Load CSV ---
codes <- read_csv("~/Desktop/data/codes-ed.csv")

# --- Merge with postal code coordinates ---
codes_geo <- codes |>
  left_join(postalcodes_geo, by = c("PostalCode" = "code")) |>
  drop_na(lat, lon)

# --- Convert to spatial points ---
codes_sf <- st_as_sf(codes_geo, coords = c("lon", "lat"), crs = 4326)

# --- Create ggplot (static) ---
p <- ggplot() +
  geom_sf(data = districts, fill = "grey95", colour = "grey70", linewidth = 0.3) +
  geom_sf(
    data = codes_sf,
    aes(size = TotalChildren,
        text = paste0("Postal code: ", PostalCode,
                      "<br>Total children: ", TotalChildren)),
    colour = "#0072B2", alpha = 0.6
  ) +
  scale_size_continuous(range = c(1, 10)) +
  coord_sf(datum = NA) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  ) +
  labs(title = "Total Children by Postal Code") +
  guides(size = "none")

# --- Make interactive map ---
leaflet() |>
  addProviderTiles("CartoDB.Positron") |>
  addPolygons(
    data = districts,
    color = "#666", weight = 1, fillOpacity = 0.1
  ) |>
  addCircleMarkers(
    data = codes_sf,
    radius = ~scales::rescale(TotalChildren, to = c(2, 12)),
    color = "#0072B2", fillOpacity = 0.6, stroke = FALSE,
    popup = ~paste0("Total children: ", TotalChildren)
  ) |>
  setView(lng = 25, lat = -29, zoom = 5) |>
  setMaxBounds(
    lng1 = 16, lat1 = -35,   # Southwest corner (approx)
    lng2 = 33, lat2 = -22    # Northeast corner (approx)
  )

```

<br>

##### Child Gender Distribution

``` {r ed-children-gender, echo=FALSE }
#| warning: false
#| message: false

library(ggplot2)
library(readr)
library(dplyr)

gender_data <- read_csv("~/Desktop/data/child-gender.csv")

gender_data <- gender_data %>%
mutate(percentage = count / sum(count) * 100,
label = paste0(gender, " (", round(percentage, 1), "%)"))

ggplot(gender_data, aes(x = "", y = count, fill = gender)) +
geom_col(width = 1, colour = "white") +
coord_polar(theta = "y") +
theme_void() +
theme(legend.title = element_blank()) +
geom_text(aes(label = label),
position = position_stack(vjust = 0.5),
size = 4) +
scale_fill_manual(
values = c(
"Boys" = "#1DBADF",
"Girls" = "#27385A",
"Not recorded" = "#FFD525"
)
)

```

<br>

##### Child Age Distribution

``` {r ed-children-ages, echo=FALSE }
#| warning: false
#| message: false

# Read the CSV

age_data <- read_csv("~/Desktop/data/age-groups-ed.csv")

# Create the bar chart
ggplot(age_data, aes(x = `Age Group`, y = `Number of Children`)) +
geom_col(fill = "#1DBADF") +
labs(x = "Age Group",
y = "Number of children") +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)
)
```

<br>

##### Family Grant Types

```{r grants-ed, echo=FALSE}
#| warning: false
#| message: false

# Load data
grants <- read_csv("~/Desktop/data/grants-ed.csv")

# Clean up labels
grants <- grants %>%
  mutate(type = recode(type,
                       "None selected" = "No response"))

# Plot
ggplot(grants, aes(x = fct_reorder(type, number_of_children), 
                   y = number_of_children)) +
  geom_col(fill = "#1DBADF", show.legend = FALSE) +
  coord_flip() +
  labs(
    x = NULL,
    y = "Number of children"
  ) +
  theme_minimal(base_size = 13)
```

_More graphs to be added_

<br>

#### 2. Access & Participation

##### Attendance registers saved (ECD Connect App)
_As we roll out to more users, we are seeing an increase in the number of attendance registers saved per month._

```{r app-attendance-bar, echo=FALSE}
#| message: false
#| warning: false
#| paged-print: true
#| out.width: 100%

df_appattendance <- read.csv("~/Desktop/data/app-attendance.csv", stringsAsFactors = FALSE)

df_appattendance <- df_appattendance %>%
  mutate(
    # Parse your "YYYY-MM" into a proper Date
    MonthDate = ym(Month)  # lubridate::ym() interprets "2025-04" as 2025-Apr-01
  )

ggplot(df_appattendance, aes(x = MonthDate, y = Registers.Saved)) +
  geom_col(fill = "#FF2180") +
  scale_x_date(
  date_labels = "%b %Y",   # 👈 shows "Apr 2025" instead of "April 2025"
  date_breaks = "1 month"
) +
  labs(
    x = "Month",
    y = "Number of registers saved"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


##### Attendance registers saved - ECD Connect Partner
_With a smaller user base for ECD Connect Partner, attendance tracking has held fairly steady with a few bumps in engagement around in-person training sessions._

```{r partner-attendance-bar, echo=FALSE}
#| message: false
#| warning: false
#| paged-print: true
#| out.width: 100%

df_appattendance <- read.csv("~/Desktop/data/partner-attendance.csv", stringsAsFactors = FALSE)

df_appattendance <- df_appattendance %>%
  mutate(
    # Parse your "YYYY-MM" into a proper Date
    MonthDate = ym(Month)  # lubridate::ym() interprets "2025-04" as 2025-Apr-01
  )

ggplot(df_appattendance, aes(x = MonthDate, y = Registers.Saved)) +
  geom_col(fill = "#83BB26") +
  scale_x_date(
  date_labels = "%b %Y",   # 👈 shows "Apr 2025" instead of "April 2025"
  date_breaks = "1 month"
) +
  labs(
    x = "Month",
    y = "Number of registers saved"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```



##### Average Child Attendance by Month


```{r child-attendance, echo=FALSE}
#| warning: false
#| message: false

# --- Load and prepare data ---
attendance <- read_csv("~/Desktop/data/child-attendance.csv") %>%
  arrange(month_start)

# --- Plot ---
ggplot(attendance, aes(x = reorder(Month, month_start),
                       y = `Percentage child attendance`)) +
  geom_col(fill = "#1DBADF") +                           # ECD Connect teal
  geom_text(aes(label = paste0(round(`Percentage child attendance`, 0), "%")),
            vjust = -0.5, size = 3.2, colour = "#004C6D") +  # navy text
  scale_y_continuous(labels = label_percent(scale = 1)) +
  labs(
    x = NULL,
    y = "Child attendance (%)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", colour = "#004C6D"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid.minor = element_blank()
  )
```

<br>

#### 3. Business & Finance

##### Spread of preschool balances (1 August to 28 October 2025)
_Balance is income minus expenses_

```{r balances-table, echo=FALSE}
#| warning: false
#| message: false

options(readr.show_col_types = FALSE)

invisible (balances <- suppressMessages(suppressWarnings(
  readr::read_csv("~/Desktop/data/balances2-ed.csv", show_col_types = FALSE)
))
)

# Remove outliers
balances_clean <- dplyr::filter(
  balances,
  balance > mean(balance) - 3*sd(balance),
  balance < mean(balance) + 3*sd(balance)
)

# Compute summary stats (no range)
summary_stats <- balances_clean %>%
  summarise(
    `Total Preschools` = n(),
    `Mean Balance (R)` = mean(balance),
    `Median Balance (R)` = median(balance),
    `Minimum Balance (R)` = min(balance),
    `Maximum Balance (R)` = max(balance),
    `Standard Deviation (R)` = sd(balance)
  ) %>%
  mutate(across(where(is.numeric), round, 0))

# Pretty table
summary_stats %>%
  gt() %>%
  fmt_number(
    columns = everything(),
    decimals = 0,
    use_seps = TRUE
  ) %>%
  tab_options(
    table.font.size = 14,
    heading.title.font.size = 16,
    table.border.top.width = 0,
    table.border.bottom.width = 0
  )

```

<br>

```{r balances-density, echo=FALSE}

#| warning: false
#| message: false

# Read in the data
balances <- read_csv("~/Desktop/data/balances2-ed.csv")

# Create histogram (one extreme outlier removed - user submitted the same income 3 times)
balances_clean <- dplyr::filter(
  balances,
  balance > mean(balance) - 3*sd(balance),
  balance < mean(balance) + 3*sd(balance)
)

ggplot(balances_clean, aes(x = balance)) +
  geom_histogram(binwidth = 3000, fill = "steelblue", colour = "white") +
  scale_x_continuous(labels = comma, breaks = pretty_breaks(n = 7)) +
  scale_y_continuous(labels = comma) +
  labs(
    x = "Balance (R)",
    y = "Number of Preschools"
  ) +
  theme_minimal()
```

##### Total Preschool Income and Expenses"
_Total income vs expenses per month across all preschools_

```{r income-expenses, echo=FALSE}
#| warning: false
#| message: false

data <- read_csv("~/Desktop/data/income-expenses.csv")

data <- data %>%
  mutate(Month = as.Date(Month))

data_long <- data %>%
  select(Month, TotalIncome, TotalExpenses) %>%
  pivot_longer(cols = c(TotalIncome, TotalExpenses),
               names_to = "Type",
               values_to = "Amount")

ggplot() +
  # Bars (side-by-side)
  geom_col(data = data_long, aes(x = Month, y = Amount, fill = Type),
           position = "dodge", width = 25) +
  
  # Line for % spent
  geom_line(data = data %>% filter(!is.na(PercentSpent)),
            aes(x = Month, y = (PercentSpent / 100) * TotalIncome, group = 1),
            colour = "black", size = 1, linetype = "dashed") +
  
  # Optional % labels
  geom_text(data = data %>% filter(!is.na(PercentSpent)),
            aes(x = Month, y = (PercentSpent / 100) * TotalIncome, 
                label = paste0(PercentSpent, "%")),
            vjust = -0.5, size = 3, colour = "black") +
  
  scale_fill_manual(values = c("TotalIncome" = "#ED1414", "TotalExpenses" = "#83BB26"),
                    labels = c("Income", "Expenses")) +
  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +
  scale_x_date(
  date_breaks = "1 month",
  date_labels = "%b %Y",
  expand = c(0.01, 0)
  ) +
  labs(
    x = "Month",
    y = "Amount (R)",
    fill = ""
  ) +
  theme_minimal(base_size = 13) +
  theme(legend.position = "top")
```

<br>

##### Income and Expense Categories
_Percentage breakdown of income and expense categories during the selected period. Each pie shows the share of total income or total expenses contributed by each category._

::: {style="width:100%"}

``` {r expense-income-types, echo=FALSE}
#| warning: false
#| message: false

conflicted::conflicts_prefer(plotly::layout)

# --- Income ---
income_data <- read_csv("~/Desktop/data/income-types.csv") %>%
  arrange(desc(Percentage)) %>%
  mutate(Category = factor(Category, levels = Category))

p1 <- plot_ly(
  data = income_data,
  labels = ~Category,
  values = ~Percentage,
  type = "pie",
  sort = FALSE,
  direction = "clockwise",
  textinfo = "label+percent",
  textposition = "auto",
  hoverinfo = "text",
  text = ~paste(Category, ": ", Percentage, "%"),
  marker = list(
    colors = c("#1DBADF", "#FF2180", "#FFD525", "#83BB26", "#27385A"),
    line = list(color = "white", width = 2)
  ),
  domain = list(x = c(0, 0.48))  # left half
) %>%
  plotly::layout(
    showlegend = FALSE,
    uniformtext = list(minsize = 12, mode = "hide"),
    startangle = 90,
    margin = list(l = 0, r = 0, t = 80, b = 0),
    automargin = TRUE,
    autosize = TRUE,
    width = NULL,
    height = 500
  )

# --- Expenses ---
expense_data <- read_csv("~/Desktop/data/expense-types.csv") %>%
  arrange(desc(Percentage)) %>%
  mutate(Category = factor(Category, levels = Category))

p2 <- plot_ly(
  data = expense_data,
  labels = ~Category,
  values = ~Percentage,
  type = "pie",
  sort = FALSE,
  direction = "clockwise",
  textinfo = "label+percent",
  textposition = "auto",
  hoverinfo = "text",
  text = ~paste(Category, ": ", Percentage, "%"),
  marker = list(
    colors = c("#1DBADF", "#FF2180", "#FFD525", "#83BB26", "#27385A", "#8EDCEF", "#FF90BF"),
    line = list(color = "white", width = 2)
  ),
  domain = list(x = c(0.52, 1))  # right half
) %>%
  plotly::layout(
    showlegend = FALSE,
    uniformtext = list(minsize = 12, mode = "hide"),
    startangle = 90,
    margin = list(l = 0, r = 0, t = 80, b = 0),
    automargin = TRUE,
    autosize = TRUE,
    width = NULL,
    height = 500
  )

# --- Combine side by side ---
combined <- subplot(p1, p2, widths = c(0.5, 0.5)) %>%
  layout(
    margin = list(b = 120, t = 80),  # add bottom space
    annotations = list(
      list(
        text = "Income Types",
        x = 0.16,   # centre under left pie
        y = -0.10,  # move below chart
        xref = "paper",
        yref = "paper",
        showarrow = FALSE,
        font = list(size = 16)
      ),
      list(
        text = "Expense Types",
        x = 0.83,   # centre under right pie
        y = -0.10,
        xref = "paper",
        yref = "paper",
        showarrow = FALSE,
        font = list(size = 16)
      )
    )
  )

combined


```

:::

<br>

##### DBE Subsidy

##### Preschools Recording DBE Subsidies
_Among those who logged income and expenses._

```{r subsidy, echo=FALSE}
#| warning: false
#| message: false

# Read data
dbe <- read_csv("~/Desktop/data/dbe_subsidy.csv")

# Reshape data for stacking
dbe_long <- dbe |>
  select(Month, preschools_with_subsidy, total_preschools) |>
  mutate(non_subsidy = total_preschools - preschools_with_subsidy) |>
  pivot_longer(cols = c(preschools_with_subsidy, non_subsidy),
               names_to = "category", values_to = "count")

# Define colours
cols <- c(
  "preschools_with_subsidy" = "#83BB26",  # green
  "non_subsidy" = "#1DBADF"               # blue
)

# Plot
ggplot(dbe_long, aes(x = Month, y = count, fill = category)) +
  geom_col(alpha = 0.9) +
  scale_fill_manual(
    values = cols,
    labels = c("With DBE subsidy", "No DBE subsidy"),
    name = NULL
  ) +
  scale_y_continuous(labels = label_number(big.mark = " ")) +
  labs(
    x = NULL,
    y = "Number of preschools"
  ) +
  theme_minimal(base_size = 13) +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "top",
    axis.text.x = element_text(angle = 45, hjust = 1)
  )


    

```

```{r avg-subsidy, echo=FALSE}
#| warning: false
#| message: false

# Read data
dbe <- read_csv("~/Desktop/data/dbe_subsidy.csv")

# Reshape data for stacking
dbe_long <- dbe |>
  select(Month, preschools_with_subsidy, total_preschools) |>
  mutate(non_subsidy = total_preschools - preschools_with_subsidy) |>
  pivot_longer(cols = c(preschools_with_subsidy, non_subsidy),
               names_to = "category", values_to = "count")

# Define colours
cols <- c(
  "preschools_with_subsidy" = "#83BB26",  # green
  "non_subsidy" = "#1DBADF"               # blue
)

# Plot
ggplot(dbe, aes(x = Month, y = average_subsidy_amount)) +
  geom_line(colour = "#FF2180", linewidth = 1.2) +
  geom_point(colour = "#FF2180", size = 2.5) +
  geom_text(aes(label = scales::number(average_subsidy_amount, big.mark = " ")),
            vjust = -0.7, size = 3.2, colour = "#27385A") +
  scale_y_continuous(labels = scales::label_number(big.mark = " ")) +
  labs(
    x = NULL,
    y = "Average DBE subsidy (R)",
    title = "Average DBE Subsidy per Preschool"
  ) +
  theme_minimal(base_size = 13) +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold", hjust = 0.5),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

```

```{r balances, echo=FALSE}
#| warning: false
#| message: false

# Read data
data <- read_csv("~/Desktop/data/balances-ed.csv")

# Preserve CSV order as factor levels
data <- data %>%
  mutate(balance_range = factor(balance_range, levels = unique(balance_range)))

# Plot in CSV order (no reorder())
ggplot(data, aes(x = number_preschools, 
                 y = balance_range)) +
  geom_col(fill = "#3b82f6") +
  geom_text(aes(label = number_preschools), hjust = -0.1, size = 4) +
  labs(
    x = "Number of Preschools",
    y = "Balance Range (Rands)"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text.y = element_text(size = 12),
    panel.grid.major.y = element_blank()
  ) +
  expand_limits(x = max(data$number_preschools) * 1.1)

```


<br>
--

### Health

#### CHW Connect

```{r gg-visits-bar, echo=FALSE}
#| message: false
#| warning: false
#| paged-print: true
#| out.width: 100%

visits <- read_csv("~/Desktop/data/visits.csv")

# Order months chronologically
visits$Month <- factor(visits$Month, levels = unique(visits$Month))

# Ensure Visit Type order (bottom first)
visits$`Visit Type` <- factor(
  visits$`Visit Type`,
  levels = c("Number of pregnant client visits", "Number of child visits")
)

# Stacked bar chart with reversed legend order
ggplot(visits, aes(x = Month, y = `Visits Completed`, fill = `Visit Type`)) +
  geom_bar(stat = "identity", colour = "white", width = 0.8) +
  scale_fill_manual(
    values = c(
      "Number of pregnant client visits" = "#FF2180",  # pink (top)
      "Number of child visits" = "#1DBADF"             # teal (bottom)
    ),
    breaks = c("Number of child visits", "Number of pregnant client visits") # ensures correct legend order
  ) +
  labs(
    title = "Visits Completed per Month (Nov 2024 – Oct 2025)",
    x = NULL,
    y = "Visits Completed",
    fill = NULL
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(face = "bold"),
    legend.position = "bottom",
    legend.box.margin = margin(t = -10),
    legend.text = element_text(size = 10)
  )
```
