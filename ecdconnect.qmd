---
title: "ECD Connect Data Report"
author: "Kim Tichmann"
format: html
---

# October 2025 Report
Data report as of 15 October 2025

## 1. Reach and Scale of ECD Connect
A summary of ECD Connect's reach.

This includes the ECD Connect App (open-access), all ECD Connect Partner versions (white-label) and Grow Great's CHW Connect. The numbers below represent all numbers since launch.

::: {.stat-block}

::: {.stat-card}
<p class="stat-number">4</p>
<p class="stat-label">partner organisations</p>
:::

::: {.stat-card}
<p class="stat-number">1,912</p>
<p class="stat-label">unique user sign-ups</p>
:::

::: {.stat-card}
<p class="stat-number">12,300</p>
<p class="stat-label">total number of children added across all platforms</p>
:::

:::


```{r beneficiaries-map, echo=FALSE}
#| message: false
#| warning: false
#| paged-print: true

library(sf)
library(dplyr)
library(ggplot2)
library(conflicted)
library(stringr)
library(patchwork)
library(scales)
library(ggplot2)
library(viridis)

conflict_prefer("filter","dplyr")

load("data/sub_places.rda")  
load("data/postalcodes_geo.rda")

df_children <- read.csv("data/codes-ed-13-10-2025.csv", stringsAsFactors = FALSE)
df_clients  <- read.csv("data/GG-location-13-10-2025.csv", stringsAsFactors = FALSE)

districts <- suppressMessages(suppressWarnings(st_read("data/DistrictMunicipalities2018_Final.shp", quiet = TRUE)))

df_clients2 <- df_clients %>%
  mutate(
    District_clean = trimws(toupper(District))
  )

districts2 <- districts %>%
  mutate(
    DISTRICT_NAME_clean = trimws(toupper(DISTRICT_N))
  )

# Which CSV district names are in the map?
matched <- df_clients2 %>%
  filter(District_clean %in% districts2$DISTRICT_NAME_clean)
invisible(nrow(matched))

# ensure the district polygon column exists
if (!"DISTRICT_NAME_clean" %in% names(districts2)) {
  stop("Expected DISTRICT_NAME_clean in 'districts2' but not found.")
}

# Join the health data to the district polygons
districts_health <- districts2 %>%
  left_join(df_clients2, by = c("DISTRICT_NAME_clean" = "District_clean"))

df_children2 <- df_children %>%
  mutate(PostalCode = as.character(PostalCode),
         TotalChildren = as.numeric(TotalChildren))

postalcodes_geo2 <- postalcodes_geo %>%
  mutate(PostalCode = as.character(code))

# join lat/lon + totals
pcs <- postalcodes_geo2 %>%
  left_join(df_children2, by = "PostalCode") %>%
  filter(!is.na(TotalChildren))

# convert to spatial points
pcs_sf <- st_as_sf(pcs, coords = c("lon", "lat"), crs = 4326, remove = FALSE)

# align CRS + spatial join to districts
pcs_sf <- st_transform(pcs_sf, st_crs(districts2))
pcs_with_district <- st_join(pcs_sf, districts2 %>% select(DISTRICT_NAME_clean), join = st_within)

# aggregate postal codes up to district
districts_ed <- pcs_with_district %>%
  st_set_geometry(NULL) %>%
  group_by(DISTRICT_NAME_clean) %>%
  summarise(TotalChildren = sum(TotalChildren, na.rm = TRUE)) %>%
  right_join(districts2, by = "DISTRICT_NAME_clean") %>%
  st_as_sf()

# ---- COMBINE BOTH LAYERS ----
health_for_map <- districts_health %>%
  select(DISTRICT_NAME_clean, geometry, Value = TotalClients) %>%
  mutate(Source = "Health")

ed_for_map <- districts_ed %>%
  select(DISTRICT_NAME_clean, geometry, Value = TotalChildren) %>%
  mutate(Source = "Education")

combined_map <- bind_rows(health_for_map, ed_for_map) %>%
  group_by(DISTRICT_NAME_clean) %>%
  summarise(
    TotalBeneficiaries = sum(Value, na.rm = TRUE),
    geometry = sf::st_union(geometry)
  ) %>%
  ungroup()

# --- Merge with district polygons to ensure full geometry coverage ---
combined_map <- districts2 %>%
  left_join(
    st_drop_geometry(combined_map),
    by = "DISTRICT_NAME_clean"
  )


# --- Plot ---

combined_map <- combined_map %>%
  mutate(
    BeneficiaryBand = case_when(
      is.na(TotalBeneficiaries) ~ "0",
      TotalBeneficiaries == 0 ~ "0",
      TotalBeneficiaries <= 500 ~ "1–500",
      TotalBeneficiaries <= 1000 ~ "501–1000",
      TotalBeneficiaries <= 1500 ~ "1001–1500",
      TotalBeneficiaries <= 2000 ~ "1501–2000",
      TotalBeneficiaries <= 2500 ~ "2001–2500",
      TotalBeneficiaries <= 3000 ~ "2501–3000",
      TotalBeneficiaries <= 3500 ~ "3001–3500",
      TotalBeneficiaries <= 4000 ~ "3501–4000",
      TotalBeneficiaries > 4000 ~ "4000+"
    ),
    BeneficiaryBand = factor(
      BeneficiaryBand,
      levels = c("0", "1–500", "501–1000", "1001–1500", "1501–2000",
                 "2001–2500", "2501–3000", "3001–3500", "3501–4000", "4000+")
    )
  )


brand_palette <- c(
  "0" = "#EFEFEF",        # light grey
  "1–500" = "#D8EBF6",    # very light blue
  "501–1000" = "#CBE9F4",
  "1001–1500" = "#A4DBEF",
  "1501–2000" = "#8EDCEF",
  "2001–2500" = "#5CCAE2",
  "2501–3000" = "#1DBADF",
  "3001–3500" = "#1497BF",
  "3501–4000" = "#52607B",
  "4000+" = "#27385A"     # darkest brand blue
)

# --- Ensure all legend colours show correctly ---
library(sf)
library(dplyr)

# Create dummy rows for each BeneficiaryBand
dummy_levels <- data.frame(
  BeneficiaryBand = factor(
    names(brand_palette),
    levels = names(brand_palette)
  )
)

# Create dummy geometries with the same CRS as your combined_map
dummy_levels$geometry <- sf::st_sfc(
  replicate(
    length(brand_palette),
    sf::st_point(c(0, 0)),
    simplify = FALSE
  ),
  crs = sf::st_crs(combined_map)   # ensure same CRS
)

# Convert dummy_levels into an sf object
dummy_levels <- sf::st_as_sf(dummy_levels)

# Combine with your real map data
combined_map2 <- dplyr::bind_rows(
  combined_map %>% select(BeneficiaryBand, geometry),
  dummy_levels
)


ggplot(combined_map2) +
    geom_sf(aes(fill = BeneficiaryBand), colour = "#fff", size = 0.15) +
  scale_fill_manual(
    values = brand_palette,
    name = "Total beneficiaries",
    drop = FALSE,
    na.value = brand_palette["0"],
    guide=guide_legend(
      override.aes = list(fill = unname(brand_palette))
    )
  ) +
  coord_sf(xlim = st_bbox(combined_map)[c("xmin", "xmax")],
         ylim = st_bbox(combined_map)[c("ymin", "ymax")],
         expand = FALSE) +
  labs(
    title = "Total Beneficiaries by District",
    subtitle = "Combined Health and Education data",
    caption = "‘Beneficiaries’ refers to children (education and health) \n and pregnant clients (health) registered in the app."
  ) +
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    panel.grid = element_blank()
  )

```

---

<br>

## 2. Engagement and Activity
Users are engaging with the ECD Connect tools and submitting data. [to be updated]

### Education
#### ECD Connect App
_Since launch on 1 April 2025 to 13 October 2025_

::: {.stat-block}

::: {.stat-card .app-background}
<p class="stat-number">1,377</p>
<p class="stat-label">unique sign-ups</p>
:::

::: {.stat-card .app-background}
<p class="stat-number">464</p>
<p class="stat-label">preschools added</p>
:::

::: {.stat-card .app-background}
<p class="stat-number">1,434</p>
<p class="stat-label">children registered</p>
:::

:::

##### User retention

**18%** of users who signed up 30+ days ago returned to the app within the past 30 days. This is higher than the standard [global app retention rate of 7% by day 30](https://www.adjust.com/resources/guides/user-retention/).

##### Attendance registers saved
_As we roll out to more users, we are seeing an increase in the number of attendance registers saved per month._

```{r app-attendance-bar, echo=FALSE}
#| message: false
#| warning: false
#| paged-print: true
#| out.width: 100%

df_appattendance <- read.csv("data/app-attendance.csv", stringsAsFactors = FALSE)

df_appattendance <- df_appattendance %>%
    mutate(
      Month = as.Date(paste0(Month, "-01")),
      Month = format(Month, "%b %Y")
    )


ggplot(data = df_appattendance, aes(x = Month, y = Registers.Saved)) +
  geom_bar(stat = "identity",  fill = "#FF2180") +
  labs(
    x = "Month",
    y = "Number of registers saved"
  )

```

#### ECD Connect Partner
_Data from launch with first partner organisation in October 2024 to 15 October 2025_

::: {.stat-block}

::: {.stat-card .partner-background}
<p class="stat-number">225</p>
<p class="stat-label">unique sign-ups</p>
:::

::: {.stat-card .partner-background}
<p class="stat-number">61</p>
<p class="stat-label">preschools added</p>
:::

::: {.stat-card .partner-background}
<p class="stat-number">801</p>
<p class="stat-label">children registered</p>
:::

:::

##### Attendance registers saved
_With a smaller user base for ECD Connect Partner, attendance tracking has held fairly steady with a few bumps in engagement around in-person training sessions._

```{r partner-attendance-bar, echo=FALSE}
#| message: false
#| warning: false
#| paged-print: true
#| out.width: 100%

df_appattendance <- read.csv("data/partner-attendance.csv", stringsAsFactors = FALSE)

df_appattendance <- df_appattendance %>%
    mutate(
      Month = as.Date(paste0(Month, "-01")),
      Month = format(Month, "%b %Y")
    )


ggplot(data = df_appattendance, aes(x = Month, y = Registers.Saved)) +
  geom_bar(stat = "identity",  fill = "#83BB26") +
  labs(
    x = "Month",
    y = "Number of registers saved"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(face = "bold"),
  )

```



### Health

#### CHW Connect

```{r gg-visits-bar, echo=FALSE}
#| message: false
#| warning: false
#| paged-print: true
#| out.width: 100%

library(ggplot2)
library(readr)
library(dplyr)

visits <- read_csv("data/visits.csv")

# Order months chronologically
visits$Month <- factor(visits$Month, levels = unique(visits$Month))

# Ensure Visit Type order (bottom first)
visits$`Visit Type` <- factor(
  visits$`Visit Type`,
  levels = c("Number of pregnant client visits", "Number of child visits")
)

# Stacked bar chart with reversed legend order
ggplot(visits, aes(x = Month, y = `Visits Completed`, fill = `Visit Type`)) +
  geom_bar(stat = "identity", colour = "white", width = 0.8) +
  scale_fill_manual(
    values = c(
      "Number of pregnant client visits" = "#FF2180",  # pink (top)
      "Number of child visits" = "#1DBADF"             # teal (bottom)
    ),
    breaks = c("Number of child visits", "Number of pregnant client visits") # ensures correct legend order
  ) +
  labs(
    title = "Visits Completed per Month (Jan 2024 – Sep 2025)",
    x = NULL,
    y = "Visits Completed",
    fill = NULL
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(face = "bold"),
    legend.position = "bottom",
    legend.box.margin = margin(t = -10),
    legend.text = element_text(size = 10)
  )
```

---
<br>

## 3. Emerging Insights

### Education

#### Child Demographics

